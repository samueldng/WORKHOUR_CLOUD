// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[]
  timeEntries TimeEntry[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status      String   @default("active")
  startDate   DateTime
  endDate     DateTime?
  hourlyRate  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  tasks       Task[]
  timeEntries TimeEntry[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("todo")
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeEntries TimeEntry[]
}

model TimeEntry {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  duration  Int      @default(0) // in seconds
  status    String   @default("active")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}